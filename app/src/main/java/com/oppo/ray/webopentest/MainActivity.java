package com.oppo.ray.webopentest;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.os.Process;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.oppo.ray.webopentest.adapter.LogAdapter;
import com.oppo.ray.webopentest.autotest.ExecuteMsg;
import com.oppo.ray.webopentest.autotest.IExecuteMsgConstant;
import com.oppo.ray.webopentest.autotest.IProgressCallback;
import com.oppo.ray.webopentest.autotest.ITestManager;
import com.oppo.ray.webopentest.autotest.TestConfiguration;
import com.oppo.ray.webopentest.autotest.TestManagerImpl;
import com.oppo.ray.webopentest.layout.LogLayoutManager;
import com.oppo.ray.webopentest.utils.Utils;
import com.oppo.ray.webopentest.utils.Views;
import com.oppo.ray.webopentest.view.AlertWindowManager;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * the main activity
 * <p/>
 */
public class MainActivity extends Activity implements View.OnClickListener, IProgressCallback, IExecuteMsgConstant,
        AlertWindowManager.ICallback {
    private static final String TAG = MainActivity.class.getSimpleName();
    private static final boolean DEBUG = false;

    private RecyclerView mLogsView;
    private EditText mTimesView;
    private TextView mUrlsView;
    private EditText mExecuteDelayView;
    private TextView mBrowserView;
    private Button mStartBtn;
    private Button mStartStop;
    private Button mStartReset;

    private ITestManager mITestManager;
    private List<ExecuteMsg> mLogs;
    private LogLayoutManager mLayoutManager;
    private LogAdapter mLogAdapter;
    private Handler mHandler = new Handler();
    private PowerManager mPowerManager = null;
    private PowerManager.WakeLock mWakeLock;
    private Map<String, String> mNameMaps;
    private Map<String, String> mPkgMaps;
    private TestConfiguration mConfiguration;
    private AlertWindowManager mWindowManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initVar();
        initView();
        initData();
    }

    /**
     * init the data
     */
    private void initData() {

    }

    private void initVar() {
        mITestManager = TestManagerImpl.getInstance();
        mITestManager.setCallback(this);
        mLogs = new ArrayList<>();
        mLayoutManager = new LogLayoutManager(this);
        mLogAdapter = new LogAdapter(mLogs);
        mPowerManager = (PowerManager) getSystemService(POWER_SERVICE);
        mWakeLock = mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, TAG);
        mWakeLock.acquire();
        this.mConfiguration = new TestConfiguration();
        mWindowManager = AlertWindowManager.getInstance(getApplicationContext());
        mWindowManager.setCallback(this);


        //init config files
        initConfigFiles();

        //init pkg maps
        mPkgMaps = new HashMap<>();
        if (Utils.isApkInstalled(this, ITestManager.BROWSER_DEFAULT)) {
            mPkgMaps.put("OPPO浏览器", ITestManager.BROWSER_DEFAULT);
        }
        if (Utils.isApkInstalled(this, ITestManager.BROWSER_QQ)) {
            mPkgMaps.put("QQ浏览器", ITestManager.BROWSER_QQ);
        }
        if (Utils.isApkInstalled(this, ITestManager.BROWSER_UC)) {
            mPkgMaps.put("UC浏览器", ITestManager.BROWSER_UC);
        }
    }

    private void initConfigFiles() {
        File dir = new File(mITestManager.getUrlConfigDir());
        final File[] files = dir.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                /**
                 *only accept file which end with .txt suffix
                 */
                return pathname.isFile() && pathname.getName().endsWith(".txt");
            }
        });
        mNameMaps = new HashMap<>();
        if (null != files) {
            for (File file : files) {
                if (file.isFile()) {
                    mNameMaps.put(file.getName(), file.getAbsolutePath());
                }
            }
        }
    }


    private void initView() {
        mLogsView = Views.findViewById(this, R.id.logs);
        mLogsView.setLayoutManager(mLayoutManager);
        mLogsView.setAdapter(mLogAdapter);

        mTimesView = Views.findViewById(this, R.id.edit_times);
        mUrlsView = Views.findViewById(this, R.id.url_config_file);
        mExecuteDelayView = Views.findViewById(this, R.id.exe_delay);
        mBrowserView = Views.findViewById(this, R.id.browser_name);
        mStartBtn = Views.findViewById(this, R.id.operation_start);
        mStartStop = Views.findViewById(this, R.id.operation_stop);
        mStartReset = Views.findViewById(this, R.id.operation_reset);

        mUrlsView.setOnClickListener(this);
        mBrowserView.setOnClickListener(this);
        mStartBtn.setOnClickListener(this);
        mStartStop.setOnClickListener(this);
        mStartReset.setOnClickListener(this);


        //default value
        Map<String, String> nameMaps = new HashMap<>(mNameMaps);
        Set<String> keys = null;
        String[] keysArray = null;
        String key = null;
        if (!mNameMaps.isEmpty()) {
            keys = nameMaps.keySet();
            keysArray = new String[keys.size()];
            keys.toArray(keysArray);
            key = keysArray[0];
            mUrlsView.setText(key);
            mConfiguration.setCurrentUrlFile(new File(mNameMaps.get(key)));
        }
        else {
            mUrlsView.setText(String.format(String.format(getResources().getString(R.string.hint_config_url),
                    mITestManager.getUrlConfigDir())));
        }


        //pkg
        Map<String, String> pkgMaps = new HashMap<>(mPkgMaps);
        keys = pkgMaps.keySet();
        keysArray = new String[keys.size()];
        keys.toArray(keysArray);
        key = "OPPO浏览器";
        mBrowserView.setText(key);
        mConfiguration.setCurrentTestPackage(mPkgMaps.get(key));

    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.url_config_file: {
                showConfigFiles();
                break;
            }
            case R.id.browser_name: {
                showBrowserChoose();
                break;
            }
            case R.id.operation_start: {
                startTest();
                break;
            }
            case R.id.operation_stop: {
                stopTest();
                break;
            }
            case R.id.operation_reset: {
                //Utils.killProcess(this, ITestManager.BROWSER_DEFAULT);
                resetTest();
                break;
            }
        }
    }

    private void resetTest() {
        if (null != mITestManager) {
            mITestManager.stop();
        }
    }

    private void stopTest() {
        if (null != mITestManager) {
            mITestManager.stop();
        }
    }

    private void showBrowserChoose() {
        Map<String, String> pkgMaps = new HashMap<>(mPkgMaps);
        Set<String> keys = pkgMaps.keySet();
        final String[] keysArray = new String[keys.size()];
        keys.toArray(keysArray);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("请选择浏览器");
        builder.setItems(keysArray, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String key = keysArray[which];
                String value = mPkgMaps.get(key);
                if (DEBUG) {
                    Log.d(TAG, String.format("showBrowserChoose：key[%s],value[%s]", key, value));
                }

                mBrowserView.setText(key);
                mConfiguration.setCurrentTestPackage(value);
            }
        });
        builder.create().show();
    }

    private void showConfigFiles() {
        if (mNameMaps.isEmpty()) {
            Log.e(TAG, "请放入配置文件");
            return;
        }

        Map<String, String> nameMaps = new HashMap<>(mNameMaps);
        Set<String> keys = nameMaps.keySet();
        final String[] keysArray = new String[keys.size()];
        keys.toArray(keysArray);
        if (nameMaps.size() == 1) {
            String key = keysArray[0];
            mUrlsView.setText(key);
            mConfiguration.setCurrentUrlFile(new File(mNameMaps.get(key)));
            return;
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("请选择配置文件");
        builder.setItems(keysArray, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String key = keysArray[which];
                String value = mNameMaps.get(key);
                if (DEBUG) {
                    Log.d(TAG, String.format("key[%s],value[%s]", key, value));
                }

                mUrlsView.setText(key);
                mConfiguration.setCurrentUrlFile(new File(value));
            }
        });
        builder.create().show();
    }

    /**
     *
     */
    private void startTest() {
        /**
         * always config by user
         */
        if (checkConfig()) {
            mITestManager.start(mConfiguration, this);
        }
        else {
            onTestError(String.format(String.format(getResources().getString(R.string.hint_config_url),
                    mITestManager.getUrlConfigDir())));
        }

    }

    private boolean checkConfig() {
        //1.times check
        int times = 0;
        try {
            times = Integer.parseInt(mTimesView.getText().toString());
        } catch (Exception e) {
            e.printStackTrace();
            times = 3;
        }
        mTimesView.setText(String.valueOf(times));
        mConfiguration.setTimes(times);

        //2.delay check
        int delayTime;
        try {
            delayTime = Integer.parseInt(mExecuteDelayView.getText().toString());
        } catch (Exception e) {
            e.printStackTrace();
            delayTime = 3;
        }
        /**
         * +1 加上启动时间
         */
        //  mConfiguration.setStartDelay((delayTime + 1) * 1000);
        mConfiguration.setStartDelay((delayTime) * 1000);

        //3.url check
        if (mNameMaps.isEmpty()) {
            return false;
        }
        if (null == mConfiguration.getCurrentUrlFile()) {
            Map<String, String> nameMaps = new HashMap<>(mNameMaps);
            Set<String> keys = nameMaps.keySet();
            final String[] keysArray = new String[keys.size()];
            keys.toArray(keysArray);
            mConfiguration.setCurrentUrlFile(new File(nameMaps.get(keysArray[0])));
        }

        //4.pkg check
        if (TextUtils.isEmpty(mConfiguration.getCurrentTestPackage())) {
            Map<String, String> pkgMaps = new HashMap<>(mPkgMaps);
            Set<String> keys = pkgMaps.keySet();
            final String[] keysArray = new String[keys.size()];
            keys.toArray(keysArray);
            mConfiguration.setCurrentUrlFile(new File(pkgMaps.get(keysArray[0])));
        }

        if (DEBUG) {
            Log.d(TAG, "checkConfig:" + mConfiguration);
        }
        return true;
    }

    @Override
    public void onTestUrl(final String currentUrl, final int time) {
        if (DEBUG) {
            Log.e(TAG, String.format("test[%s],times[%d]", currentUrl, time));
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(currentUrl, DOING));
                mLogAdapter.notifyDataSetChanged();
                mHandler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            mLogsView.smoothScrollToPosition(mLogsView.getAdapter().getItemCount());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }, 500);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestStart() {
        if (DEBUG) {
            Log.d(TAG, "onTestStart");
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.clear();
                mLogs.add(new ExecuteMsg(null, START));
                mLogAdapter.notifyDataSetChanged();
                mStartBtn.setEnabled(false);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestPause() {
        if (DEBUG) {
            Log.d(TAG, "onTestPause");
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, PAUSE));
                mLogAdapter.notifyDataSetChanged();
                mStartBtn.setEnabled(true);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestStop() {
        if (DEBUG) {
            Log.d(TAG, "onTestStop");
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, STOP));
                mLogAdapter.notifyDataSetChanged();
                mStartBtn.setEnabled(true);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestFinish() {
        if (DEBUG) {
            Log.d(TAG, "onTestFinish");
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, FINISH));
                mLogAdapter.notifyDataSetChanged();
                mStartBtn.setEnabled(true);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestTimes(final int oldTimes, final int currentTime) {
        Runnable runnable = new Runnable() {
            public void run() {
                TestConfiguration configuration = mITestManager.getCurrentConfig();
                if (null == configuration) {
                    return;
                }

                boolean isInValidTime = currentTime > configuration.getTimes();
                if (0 != oldTimes) {
                    mLogs.add(new ExecuteMsg(null, TIMES_END, oldTimes));
                }
                if (0 != currentTime && !isInValidTime) {
                    mLogs.add(new ExecuteMsg(null, TIMES_START, currentTime));
                }
                mLogAdapter.notifyDataSetChanged();
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestError(final String errorMsg) {
        if (DEBUG) {
            Log.d(TAG, "onTestError");
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, ERROR, errorMsg));
                mLogAdapter.notifyDataSetChanged();
                mStartBtn.setEnabled(true);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (null != mITestManager) {
            mITestManager.onDestroy();
        }

        try {
            mWakeLock.release();
        } catch (Exception e) {
            e.printStackTrace();
        }

        /**
         * kill my process
         */
        Process.killProcess(Process.myPid());
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (null != mITestManager && mITestManager.isRunning()) {
            mWindowManager.show(this);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        mWindowManager.hide();

        //reInit file list
        initConfigFiles();
    }

    @Override
    public void onStopClicked() {
        if (null != mITestManager) {
            mITestManager.stop();
            ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
            am.moveTaskToFront(getTaskId(), ActivityManager.MOVE_TASK_WITH_HOME);
        }
    }
}
