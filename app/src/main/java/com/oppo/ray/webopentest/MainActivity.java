package com.oppo.ray.webopentest;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import com.oppo.ray.webopentest.adapter.LogAdapter;
import com.oppo.ray.webopentest.autotest.ExecuteMsg;
import com.oppo.ray.webopentest.autotest.ExecuteUrl;
import com.oppo.ray.webopentest.autotest.IExecuteMsgConstant;
import com.oppo.ray.webopentest.autotest.IProgressCallback;
import com.oppo.ray.webopentest.autotest.ITestManager;
import com.oppo.ray.webopentest.autotest.TestConfiguration;
import com.oppo.ray.webopentest.autotest.TestManagerImpl;
import com.oppo.ray.webopentest.layout.LogLayoutManager;
import com.oppo.ray.webopentest.utils.Views;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * the main activity
 * <p/>
 * //TODO 做一个悬浮按钮，方便用户停止
 */
public class MainActivity extends Activity implements View.OnClickListener, IProgressCallback, IExecuteMsgConstant {
    private static final String TAG = MainActivity.class.getSimpleName();
    private static final boolean DEBUG = BuildConfig.DEBUG;

    private Button mRedirectBrowser = null;

    private ITestManager mITestManager;

    private List<ExecuteMsg> mLogs;
    private RecyclerView mLogsView;
    private LogLayoutManager mLayoutManager;
    private LogAdapter mLogAdapter;
    private Handler mHandler = new Handler();
    private PowerManager mPowerManager = null;
    private PowerManager.WakeLock mWakeLock;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initVar();
        initView();
        initData();
    }

    private void initData() {

    }

    private void initVar() {
        mITestManager = TestManagerImpl.getInstance();
        mITestManager.setCallback(this);
        mLogs = new ArrayList<>();
        mLayoutManager = new LogLayoutManager(this);
        mLogAdapter = new LogAdapter(mLogs);
        mPowerManager = (PowerManager) getSystemService(POWER_SERVICE);
        mWakeLock = mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, TAG);
        mWakeLock.acquire();
    }

    private void initView() {
        mRedirectBrowser = Views.findViewById(this, R.id.redirectToBrowser);
        mRedirectBrowser.setOnClickListener(this);
        mLogsView = Views.findViewById(this, R.id.logs);
        mLogsView.setLayoutManager(mLayoutManager);
        mLogsView.setAdapter(mLogAdapter);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.redirectToBrowser: {
                startTest();
                break;
            }
        }
    }

    private void startTest() {
        /**
         * always config by user
         */
        TestConfiguration configuration = new TestConfiguration();
        configuration.setmCurrentUrlFile(new File(mITestManager.getUrlConfigDir(), "top_urls.txt"));
        configuration.setmStartDelay(3 * 1000);
        configuration.setmCurrentTestPackage(ITestManager.BROWSER_DEFAULT);
        configuration.setmTimes(3);

        mITestManager.start(configuration, this);
    }

    @Override
    public void onTestUrl(final String currentUrl, final int time) {
        if (DEBUG) {
            Log.e(TAG, String.format("test[%s],times[%d]", currentUrl, time));
        }
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(new ExecuteUrl(currentUrl, time + 1), DOING));
                mLogAdapter.notifyDataSetChanged();
                mHandler.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            mLogsView.smoothScrollToPosition(mLogsView.getAdapter().getItemCount());
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }, 500);
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestStart() {
        Log.d(TAG, "onTestStart");
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, START));
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestPause() {
        Log.d(TAG, "onTestPause");
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, PAUSE));
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestStop() {
        Log.d(TAG, "onTestStop");
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, STOP));
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestFinish() {
        Log.d(TAG, "onTestFinish");
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, FINISH));
            }
        };
        mHandler.post(runnable);
    }

    @Override
    public void onTestError() {
        Log.d(TAG, "onTestError");
        Runnable runnable = new Runnable() {
            public void run() {
                mLogs.add(new ExecuteMsg(null, ERROR));
            }
        };
        mHandler.post(runnable);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (null != mITestManager) {
            mITestManager.onDestroy();
        }

        try {
            mWakeLock.release();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        //这里显示悬浮按钮
    }

    @Override
    protected void onResume() {
        super.onResume();
        //这里隐藏悬浮按钮
    }
}
