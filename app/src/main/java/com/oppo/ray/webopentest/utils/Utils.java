package com.oppo.ray.webopentest.utils;

import android.app.ActivityManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.util.Log;

import com.google.common.base.Preconditions;
import com.oppo.ray.webopentest.R;
import com.oppo.ray.webopentest.autotest.IProgressCallback;
import com.oppo.ray.webopentest.autotest.TestConfiguration;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * the utils
 */
public class Utils {
    private static final String TAG = Utils.class.getSimpleName();
    private static final boolean DEBUG = false;

    /**
     * create a file like date\package_name\time_url
     *
     * @param rootDir       the root directory
     * @param configuration the test configuration
     * @param executeUrl    the current execute url
     * @param currentTimes
     * @param currentIndex
     * @param mTestCallback
     * @param context
     * @return the created file
     */
    public static File createFile(String rootDir, TestConfiguration configuration, String executeUrl,
            int currentTimes, int currentIndex, IProgressCallback mTestCallback, Context context) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        //date dir
        File dirDate = new File(rootDir, String.format("%d-%d-%d", calendar.get(Calendar.YEAR), calendar.get
                (Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH)));
        if (!dirDate.isDirectory()) {
            boolean createResult = dirDate.mkdirs();
            if (!createResult) {
                Log.e(TAG, "create dir failed");
                if (null != mTestCallback) {
                    mTestCallback
                            .onTestError(context.getResources().getString(R.string.error_create_capture_dir_failed));
                }
                return null;
            }
        }

        //package name
        File dirPackage = new File(dirDate, configuration.getCurrentTestPackage());
        if (!dirPackage.isDirectory()) {
            boolean createResult = dirPackage.mkdirs();
            if (!createResult) {
                Log.e(TAG, "create package dir failed");
                if (null != mTestCallback) {
                    mTestCallback
                            .onTestError(context.getResources().getString(R.string.error_create_capture_dir_failed));
                }
                return null;
            }
        }

        //create file
        String fileName = String.format("%d-No%d-%s.png", currentTimes, currentIndex, executeUrl);
        File file = new File(dirPackage, fileName);
        if (!file.isFile()) {
            try {
                boolean createResult = file.createNewFile();
                if (!createResult) {
                    Log.e(TAG, "create file failed");
                    if (null != mTestCallback) {
                        mTestCallback
                                .onTestError(
                                        context.getResources().getString(R.string.error_create_capture_file_failed));
                    }
                    return null;
                }

                return file;
            } catch (IOException e) {
                e.printStackTrace();
                Log.e(TAG, "create file exception");
                if (null != mTestCallback) {
                    mTestCallback
                            .onTestError(
                                    context.getResources().getString(R.string.error_create_capture_file_error));
                }
                return null;
            }
        }

        return file;
    }

    /**
     * parse config urls
     *
     * @param configuration the Configuration
     * @return the list of Execute url
     */
    public static List<String> initUrls(TestConfiguration configuration) {
        Preconditions.checkArgument(configuration != null && configuration.getCurrentUrlFile() != null);
        List<String> urls = null;

        File currentFile = configuration.getCurrentUrlFile();
        if (!currentFile.isFile()) {
            Log.e(TAG, "initUrls return for not a file");
            return null;
        }

        BufferedReader reader = null;
        InputStreamReader inputStream = null;
        try {
            inputStream = new InputStreamReader(new FileInputStream(currentFile), "utf-8");
            reader = new BufferedReader(inputStream);
            String line;
            urls = new ArrayList<>();
            while (null != (line = reader.readLine())) {
                urls.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != reader) {
                    reader.close();
                }

                if (null != inputStream) {
                    inputStream.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if (DEBUG) {
            Log.i(TAG, String.format("initUrls urls[%s]", urls));
        }
        return urls;
    }

    public static boolean isApkInstalled(Context context, String pkgName) {
        PackageManager packageManager = context.getPackageManager();
        try {
            ApplicationInfo applicationInfo = packageManager.getApplicationInfo(pkgName, PackageManager.GET_META_DATA);
            return null != applicationInfo;
        } catch (PackageManager.NameNotFoundException e) {
            return false;
        }
    }

    public static boolean killProcess(Context context, String pkg) {
        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        final List<ActivityManager.RunningAppProcessInfo> runningProcesses = am.getRunningAppProcesses();
        for (ActivityManager.RunningAppProcessInfo runningProcess : runningProcesses) {
            if (runningProcess.processName.equals(pkg)) {
                String cmd = String.format(" kill -9 %d", runningProcess.pid);
                ShellUtils.execCommand(cmd, true);
                return true;
            }
        }
        return false;
    }

    public static int dp2px(Context context, float dp) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return Math.round(dp * scale);
    }
}
