package com.oppo.ray.webopentest.view;

import android.app.Activity;
import android.content.Context;
import android.graphics.PixelFormat;
import android.os.Looper;
import android.view.Gravity;
import android.view.View;
import android.view.WindowManager;

import com.google.common.base.Preconditions;
import com.oppo.ray.webopentest.R;
import com.oppo.ray.webopentest.utils.Utils;
import com.oppo.ray.webopentest.utils.Views;

/**
 * 考虑截屏的时候隐藏
 */
public class AlertWindowManager {
    private static final String TAG = AlertWindowManager.class.getSimpleName();
    private static final boolean DEBUG = true;
    private View mContentView;
    private ICallback mCallback;
    private static AlertWindowManager sInstance;
    private WindowManager mWindowManager;
    private Context mContext;
    private boolean isShowing = false;

    public static AlertWindowManager getInstance(Context context) {
        if (null == sInstance) {
            synchronized (AlertWindowManager.class) {
                if (null == sInstance) {
                    sInstance = new AlertWindowManager(context);
                }
            }
        }
        return sInstance;
    }

    private AlertWindowManager(Context context) {
        this.mContext = context;
        this.mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
    }

    public void show(Activity context) {
        Preconditions.checkArgument(Looper.myLooper() == Looper.getMainLooper());

        this.isShowing = true;
        if (null == mContentView) {
            initContentView(context);
        }

        Views.checkRemoveFromParent(mContentView);

        final WindowManager.LayoutParams params = new WindowManager.LayoutParams();
        params.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;
        int flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
                WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL |
                WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR |
                WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH;
        params.flags = flags;
        params.format = PixelFormat.TRANSLUCENT;
        params.width = Utils.dp2px(mContext, 60);
        params.height = Utils.dp2px(mContext, 40);
        params.gravity = Gravity.LEFT | Gravity.TOP;

        try {
            mWindowManager.addView(mContentView, params);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void initContentView(Context context) {
        mContentView = View.inflate(context, R.layout.alert_window, null);
        mContentView.findViewById(R.id.stop).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (null != mCallback) {
                    mCallback.onStopClicked();
                }
            }
        });
    }

    public void hide() {
        Preconditions.checkArgument(Looper.myLooper() == Looper.getMainLooper());

        if (isShowing && null != mContentView) {
            mWindowManager.removeView(mContentView);
            this.isShowing = false;
        }
    }


    public AlertWindowManager setCallback(ICallback mCallback) {
        this.mCallback = mCallback;
        return this;
    }

    public interface ICallback {
        void onStopClicked();
    }
}
